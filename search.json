{"Functions.html#/c:@F@MMMLog":{"name":"MMMLog","abstract":"<p>The main entry point of our simple logging system. The output of our <code>MMM_LOG_*</code> macros and corresponding"},"Functions.html#/c:@F@MMMLogOverrideOutputWithBlock":{"name":"MMMLogOverrideOutputWithBlock","abstract":"<p>Allows the app to override the default output of <code>MMMLog()</code>.</p>"},"Functions.html#/c:@F@MMMLogFormat":{"name":"MMMLogFormat","abstract":"<p>Formatter that is used by the default <code>MMMLog()</code> handler. You can use it in your override to match the output.</p>"},"Functions.html#/c:@F@MMMLogOutputToOSLog":{"name":"MMMLogOutputToOSLog","abstract":"<p>You can use this with <code>MMMLogOverrideOutput()</code> to redirect messages to <code>OSLog</code> aka <code>os_log</code> aka Apple&rsquo;s unified logging system.</p>"},"Functions.html#/c:@F@MMMLogOutputToConsole":{"name":"MMMLogOutputToConsole","abstract":"<p>Use this with <code>MMMLogOverrideOutput()</code> to redirect messages to XCode console in a way similar to <code>NSLog()</code> but less noisy.</p>"},"Functions.html#/c:@F@MMMLogContextFromObject":{"name":"MMMLogContextFromObject","abstract":"<p>Used by <code>MMM_LOG_*</code> macros to generate a <code>context</code> string needed by <code>MMMLog()</code> function from the given ObjC object.</p>"},"Functions.html#/c:@F@_MMMSensitiveInfo":{"name":"_MMMSensitiveInfo","abstract":"<p>The actual implementation of <code>MMMSensitiveInfo()</code> for Release builds truncating the passed value.</p>"},"Functions.html#/c:MMMLog.h@F@MMMSensitiveInfo":{"name":"MMMSensitiveInfo","abstract":"<p>Used to wrap sensitive strings such as emails or auth tokens when tracing them."},"Type%20Definitions.html#/c:MMMLog.h@T@MMMLogOutputBlock":{"name":"MMMLogOutputBlock","abstract":"<p>Undocumented</p>"},"Enums/MMMLogLevel.html#/c:@E@MMMLogLevel@MMMLogLevelTrace":{"name":"MMMLogLevelTrace","abstract":"<p>Level for messages that are mostly used for debugging/testing and that can be potentially (not necessarily!)","parent_name":"MMMLogLevel"},"Enums/MMMLogLevel.html#/c:@E@MMMLogLevel@MMMLogLevelInfo":{"name":"MMMLogLevelInfo","abstract":"<p>Level for important non-error messages that can be useful for diagnostics even in Release builds.</p>","parent_name":"MMMLogLevel"},"Enums/MMMLogLevel.html#/c:@E@MMMLogLevel@MMMLogLevelError":{"name":"MMMLogLevelError","abstract":"<p>Level for important error messages.</p>","parent_name":"MMMLogLevel"},"Enums/MMMLogLevel.html":{"name":"MMMLogLevel","abstract":"<p>Message severity levels for MMMLog(). Yes, 3 is enough.</p>"},"Categories/NSObject%28MMMLog%29.html#/c:objc(cs)NSObject(im)mmm_instanceNameForLogging":{"name":"-mmm_instanceNameForLogging","abstract":"<p>Addition context that should be added to the class name when this instance is logging something via MMM_LOG_* macros.","parent_name":"NSObject(MMMLog)"},"Categories/NSObject%28MMMLog%29.html#/c:objc(cs)NSObject(cm)mmm_instanceNameForLogging":{"name":"+mmm_instanceNameForLogging","abstract":"<p>Same as <code><a href=\"36f8f5912051ae747ef441d6511ca4cbCategories/NSObject%28MMMLog%29.html#/c:objc(cs)NSObject(im)mmm_instanceNameForLogging\">-mmm_instanceNameForLogging</a></code> but for the class itself.</p>","parent_name":"NSObject(MMMLog)"},"Categories/NSObject%28MMMLog%29.html":{"name":"NSObject(MMMLog)","abstract":"<p>Undocumented</p>"},"Categories.html":{"name":"Categories","abstract":"<p>The following categories are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Type%20Definitions.html":{"name":"Type Definitions","abstract":"<p>The following type definitions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"}}